version: "3.8"

services:
  traefik:
    image: traefik:v2.9
    command:
      # Define entrypoints for HTTP and HTTPS:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Enable Docker provider; Traefik will monitor containers for labels:
      - "--providers.docker=true"
      # Enable Traefik dashboard (secure it in production)
      - "--api.insecure=true"
      # Letâ€™s Encrypt configuration: automatic certificate retrieval
      - "--certificatesResolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesResolvers.myresolver.acme.email=your-email@example.com"
      - "--certificatesResolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80" # Expose HTTP on the host
      - "443:443" # Expose HTTPS on the host
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Persist Let's Encrypt certificates:
      - "./traefik/letsencrypt:/letsencrypt"
    networks:
      - web

  go-app:
    image: go-app:latest
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    # Traefik uses the Docker network to route to your container.
    networks:
      - web
    labels:
      - "traefik.enable=true"
      # Route traffic that arrives at Host `api.postprove.com`
      - "traefik.http.routers.go-app.rule=Host(`api.postprove.com`)"
      # Attach this router to both HTTP and HTTPS entrypoints.
      - "traefik.http.routers.go-app.entrypoints=web,websecure"
      # Activate TLS with our ACME resolver (only applies when accessed via HTTPS)
      - "traefik.http.routers.go-app.tls.certresolver=myresolver"
      # Internal port on which our Go container listens.
      - "traefik.http.services.go-app.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 5s
      timeout: 3s
      retries: 3

networks:
  web:
    external: true
